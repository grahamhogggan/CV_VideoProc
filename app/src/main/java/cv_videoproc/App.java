/*
 * This source file was generated by the Gradle 'init' task
 */
package cv_videoproc;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.VideoWriter;

import javax.swing.*;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.List;
import java.nio.file.Paths;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
//import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

//import java.awt.image.DataBufferByte;
public class App {
    public static boolean stopped = false;
    public static boolean capturing = false;
    public static boolean idle = true;

    enum AppPage {
        Home,
        Recording,
        NewProjectCreation,
        OpenProject,
        ViewClip,
    }

    public static AppPage currentPage = AppPage.Home;

    private static String configFilepath = "config.txt";
    private final static String DefaultProjectPath = "EmptyProject";
    private static String currentProjectDirectory = "Projects/" + DefaultProjectPath;
    private static String currentViewingClipPath = "";

    public String getGreeting() {
        return "Hello World!";
    }

    static {
        // Load the OpenCV native library
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    public static void main(String[] args) {
        System.out.println("Program Started");

        File configFile = new File(configFilepath);
        if (!configFile.exists()) {
            try {
                FileWriter initializer = new FileWriter(configFilepath);
                initializer.write("ProjectCount:0");
                initializer.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

        }
        File defaultProject = new File("Projects/" + DefaultProjectPath);
        if (!defaultProject.exists()) {
            System.out.println("Created empty project");
            CreateProject(DefaultProjectPath);
        }

        while (true) {
            System.out.println(currentPage.toString());
            switch (currentPage) {
                case Home:
                    IdleMode();
                    break;
                case Recording:
                    CaptureMode();
                    break;
                case NewProjectCreation:
                    NewProjectMode();
                    break;
                case OpenProject:
                    OpenProjectMode();
                    break;
                case ViewClip:
                    ViewMode();
                    break;
            }
        }

    }

    private static void CreateProject(String name) {
        currentProjectDirectory = "Projects/" + name;
        File directory = new File("Projects/" + name);
        directory.mkdirs();
        try {
            FileWriter setup = new FileWriter(currentProjectDirectory + "/info.txt");
            setup.write("clips:0");
            setup.close();
        } catch (Exception e) {
        }

    }

    private static void IdleMode() {
        idle = true;
        JFrame frame = new JFrame("Home");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 520); // Set window size
        frame.setLocationRelativeTo(null); // Center the window
        frame.setLayout(new BorderLayout());

        JPanel centerPanel = new JPanel();
        centerPanel.setAlignmentX(SwingConstants.CENTER);
        centerPanel.setBackground(new Color(165, 205, 255));
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
        frame.add(centerPanel, BorderLayout.CENTER);

        JLabel homeText = new JLabel("Home", SwingConstants.CENTER);
        homeText.setFont(new Font("Sans Serif", Font.PLAIN, 50));
        homeText.setAlignmentX(Component.CENTER_ALIGNMENT);
        centerPanel.add(homeText);
        JLabel projectName = new JLabel(currentProjectDirectory.split("/")[1], SwingConstants.CENTER);
        projectName.setAlignmentX(Component.CENTER_ALIGNMENT);
        projectName.setFont(new Font("Sans Serif", Font.PLAIN, 30));
        centerPanel.add(projectName);
        File proj = new File(currentProjectDirectory);

        String[] clips = proj.list();
        String[] trimmedClips = new String[clips.length - 1];
        for (int i = 0, j = 0; i < clips.length; i++, j++) {
            if (clips[i].equals("info.txt")) {
                j--;
            } else {
                trimmedClips[j] = clips[i];
            }
        }
        JList<String> clipsBrowser = new JList<String>(trimmedClips);
        clipsBrowser.setAlignmentX(Component.CENTER_ALIGNMENT);
        clipsBrowser.setAlignmentY(Component.CENTER_ALIGNMENT);
        clipsBrowser.setBackground(new Color(165, 205, 255));
        centerPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        centerPanel.add(clipsBrowser);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        JButton exitButton = new JButton("Exit");
        JButton captureButton = new JButton("Record");
        JButton newButton = new JButton("New Project");
        JButton openButton = new JButton("Open Project");
        JButton viewButton = new JButton("View");

        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose(); // Close window
                System.exit(0); // Exit application
            }
        });
        captureButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                stopped = false;
                System.out.println("Going to capture");
                currentPage = AppPage.Recording;
                idle = false;
            }
        });
        newButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                System.out.println("Going to create a new project");
                currentPage = AppPage.NewProjectCreation;
                idle = false;
            }
        });
        openButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                System.out.println("Going to open an existing project");
                currentPage = AppPage.OpenProject;
                idle = false;
            }
        });
        viewButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!clipsBrowser.isSelectionEmpty()) {
                    frame.dispose();
                    System.out.println("Going to view the selected clip");
                    currentViewingClipPath = clipsBrowser.getSelectedValue();
                    currentPage = AppPage.ViewClip;
                    idle = false;
                }
            }
        });
        buttonPanel.add(viewButton);
        buttonPanel.add(captureButton);
        buttonPanel.add(newButton);
        buttonPanel.add(openButton);
        buttonPanel.add(exitButton);
        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setVisible(true);
        while (idle) {
            System.out.print("");
        }
    }

    private static void ViewMode() {
        idle = true;
        JFrame frame = new JFrame("View");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 520); // Set window size
        frame.setLocationRelativeTo(null); // Center the window
        frame.setLayout(new BorderLayout());
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        JButton backButton = new JButton("Done");

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                stopped = true;
                System.out.println("nevermind");
                // CaptureMode();
                currentPage = AppPage.Home;
                idle = false;
            }
        });
        buttonPanel.add(backButton);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        JLabel videoPlayback = new JLabel();
        frame.add(videoPlayback, BorderLayout.CENTER);
        

        frame.setVisible(true);

        VideoCapture reader = new VideoCapture(currentProjectDirectory+"/"+currentViewingClipPath);
        Mat viewMat = new Mat();
        while (idle) {
            System.out.print("");
            try
            {
                if(reader.read(viewMat))
                {
                    BufferedImage image = matToBufferedImage(viewMat);
                    videoPlayback.setIcon(new ImageIcon(image));
                    frame.repaint();
                }
                Thread.sleep(33);
            }
            catch(Exception e)
            {

            }
        }
    }

    private static void NewProjectMode() {
        idle = true;
        JFrame frame = new JFrame("Create new project");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 100); // Set window size
        frame.setLocationRelativeTo(null); // Center the window
        frame.setLayout(new BorderLayout());
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        JButton backButton = new JButton("Cancel");
        JButton createButton = new JButton("Create");
        JTextField nameInputField = new JTextField("ProjectName");
        frame.add(nameInputField, BorderLayout.CENTER);

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                stopped = true;
                System.out.println("nevermind");
                // CaptureMode();
                currentPage = AppPage.Home;
                idle = false;
            }
        });
        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                String newProjectDirectoryName = nameInputField.getText();
                CreateProject(newProjectDirectoryName);
                System.out.println("Created a new project named " + newProjectDirectoryName);
                // CaptureMode();
                currentPage = AppPage.Home;
                idle = false;
            }
        });
        buttonPanel.add(backButton);
        buttonPanel.add(createButton);

        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setVisible(true);
        while (idle) {
            System.out.print("");
        }
    }

    private static void OpenProjectMode() {
        idle = true;
        JFrame frame = new JFrame("Open a project");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 300); // Set window size
        frame.setLocationRelativeTo(null); // Center the window
        frame.setLayout(new BorderLayout());
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        JButton backButton = new JButton("Cancel");
        JButton openButton = new JButton("Open");
        File projectsFolder = new File("Projects");

        JList<String> projectList = new JList<String>(projectsFolder.list());
        frame.add(projectList, BorderLayout.CENTER);

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                stopped = true;
                System.out.println("nevermind");
                // CaptureMode();
                currentPage = AppPage.Home;
                idle = false;
            }
        });
        openButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!projectList.isSelectionEmpty()) {
                    frame.dispose();
                    currentProjectDirectory = "Projects/" + projectList.getSelectedValue();
                    currentPage = AppPage.Home;
                    idle = false;
                }

            }
        });
        buttonPanel.add(backButton);
        buttonPanel.add(openButton);

        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setVisible(true);
        while (idle) {
            System.out.print("");
        }
    }

    private static void CaptureMode() {
        System.out.println("capturing now");
        JFrame frame = new JFrame("Cam");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 520); // Set window size
        frame.setLocationRelativeTo(null); // Center the window
        JLabel video = new JLabel();
        frame.setLayout(new BorderLayout());
        frame.add(video, BorderLayout.CENTER);
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout()); // Horizontal layout for buttons
        VideoCapture camera = new VideoCapture(0);
        if (!camera.isOpened()) {
            System.out.println("Error: Could not open webcam.");
            return;
        } else {
            System.out.println("Webcam opened");
        }

        String filename = currentProjectDirectory + "/recording";
        try {
            List<String> info = Files.readAllLines(Paths.get(currentProjectDirectory + "/info.txt"));
            String clipCountStr = info.get(0);
            String num = clipCountStr.split(":")[1];
            int decoded = Integer.parseInt(num);
            filename += (decoded + 1);
            String recoded = "clips:" + (decoded + 1);
            try {
                FileWriter rewrite = new FileWriter(currentProjectDirectory + "/info.txt");
                rewrite.write(recoded);
                rewrite.close();
            } catch (Exception e) {
            }
            ;

        } catch (Exception e) {
        }
        filename += ".mp4";
        File saveFile = new File(filename);
        if (saveFile.exists()) {
            saveFile.delete();
        }
        File dir = new File(currentProjectDirectory);
        dir.mkdirs();

        int fourcc = VideoWriter.fourcc('H', '2', '6', '4');
        VideoWriter writer = new VideoWriter(filename, fourcc, 30.0, new Size(640, 480));
        if (!writer.isOpened()) {
            System.out.println("Error: Could not open VideoWriter.");
            return;
        }
        JButton captureButton = new JButton("Capture");
        JButton stopButton = new JButton("Stop");
        captureButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                capturing = !capturing;
            }
        });
        stopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                camera.release(); // Release webcam
                frame.dispose();
                writer.release();
                // System.exit(0); // Exit application
                stopped = true;
                currentPage = AppPage.Home;

            }
        });
        // Add buttons to panel
        buttonPanel.add(captureButton);
        buttonPanel.add(stopButton);

        // Add button panel to bottom
        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setVisible(true);
        System.out.println("Frame displayed");

        // Initialize VideoCapture for the default webcam (index 0)

        // Create a Mat object to store the frame
        Mat matFrame = new Mat();
        VideoProcess processor = new VideoProcess();
        stopped = false;

        // Continuously capture and display frames
        while (!stopped) {
            // System.out.print(" .");
            // Read a frame from the webcam
            if (camera.read(matFrame)) {
                Mat finalIMG = processor.process(matFrame);
                if (capturing)
                    writer.write(finalIMG);
                Mat dispImage = processor.appProcess(finalIMG);
                // Convert the Mat frame to BufferedImage for display
                BufferedImage image = matToBufferedImage(dispImage);
                // Update the JLabel with the new frame
                video.setIcon(new ImageIcon(image));
                // Repaint the frame to ensure smooth display
                frame.repaint();
            } else {
                System.out.println("Error: Could not grab frame.");
            }

            // Add a small delay to control frame rate (e.g., ~30 FPS)
            try {
                Thread.sleep(33);
            } catch (InterruptedException e) {
                e.printStackTrace();
                break;
            }
        }

        // Release the camera and close the window
        camera.release();
        writer.release();
        frame.dispose();
    }

    private static BufferedImage matToBufferedImage(Mat mat) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (mat.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int width = mat.cols();
        int height = mat.rows();
        BufferedImage image = new BufferedImage(width, height, type);
        byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        mat.get(0, 0, data);
        return image;
    }
}
